# -*- coding: utf-8 -*-
"""
Script para testar a conex√£o e funcionamento do PostgreSQL
"""

import os
import sys

# Carregar vari√°veis de ambiente
try:
    from dotenv import load_dotenv
    if os.path.exists('.env'):
        load_dotenv()
        print("‚úÖ Arquivo .env carregado")
    else:
        print("‚ö†Ô∏è Arquivo .env n√£o encontrado")
except ImportError:
    print("‚ö†Ô∏è python-dotenv n√£o dispon√≠vel")

# Testar importa√ß√µes
try:
    import psycopg2
    print("‚úÖ psycopg2 instalado")
except ImportError:
    print("‚ùå psycopg2 n√£o instalado - execute: pip install psycopg2-binary")
    sys.exit(1)

# Testar conex√£o direta com PostgreSQL
def testar_conexao_postgres():
    pg_config = {
        'host': os.environ.get('POSTGRES_HOST', 'localhost'),
        'port': os.environ.get('POSTGRES_PORT', '5432'),
        'database': os.environ.get('POSTGRES_DB', 'tma_tmr_db'),
        'user': os.environ.get('POSTGRES_USER', 'postgres'),
        'password': os.environ.get('POSTGRES_PASSWORD', '')
    }
    
    print(f"üîÑ Testando conex√£o com PostgreSQL...")
    print(f"   Host: {pg_config['host']}")
    print(f"   Porta: {pg_config['port']}")
    print(f"   Banco: {pg_config['database']}")
    print(f"   Usu√°rio: {pg_config['user']}")
    
    try:
        conn = psycopg2.connect(**pg_config)
        cursor = conn.cursor()
        
        # Testar query simples
        cursor.execute("SELECT version();")
        version = cursor.fetchone()[0]
        print(f"‚úÖ Conex√£o bem-sucedida!")
        print(f"   Vers√£o PostgreSQL: {version}")
        
        # Verificar se o banco existe e est√° acess√≠vel
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
        """)
        tabelas = cursor.fetchall()
        print(f"üìä Tabelas existentes: {len(tabelas)}")
        for tabela in tabelas:
            print(f"   - {tabela[0]}")
        
        cursor.close()
        conn.close()
        return True
        
    except psycopg2.Error as e:
        print(f"‚ùå Erro de conex√£o PostgreSQL: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

# Testar Flask App
def testar_flask_app():
    print(f"\nüîÑ Testando Flask App...")
    
    try:
        from app import app, db, User, Registro
        
        with app.app_context():
            print("‚úÖ App Flask carregado")
            print(f"   Database URI: {app.config['SQLALCHEMY_DATABASE_URI'][:50]}...")
            
            # Tentar criar as tabelas
            try:
                db.create_all()
                print("‚úÖ Tabelas criadas/verificadas com sucesso")
                
                # Testar contagem de registros
                users_count = User.query.count()
                registros_count = Registro.query.count()
                
                print(f"üìä Dados atuais:")
                print(f"   Usu√°rios: {users_count}")
                print(f"   Registros: {registros_count}")
                
                return True
                
            except Exception as db_error:
                print(f"‚ùå Erro ao criar/acessar tabelas: {db_error}")
                return False
                
    except Exception as e:
        print(f"‚ùå Erro ao carregar Flask App: {e}")
        return False

if __name__ == "__main__":
    print("üß™ Teste de Configura√ß√£o PostgreSQL")
    print("=" * 50)
    
    # Teste 1: Conex√£o direta
    conexao_ok = testar_conexao_postgres()
    
    # Teste 2: Flask App
    if conexao_ok:
        app_ok = testar_flask_app()
        
        if app_ok:
            print("\nüéâ Todos os testes passaram!")
            print("‚úÖ PostgreSQL configurado corretamente")
            print("‚úÖ Flask App funcionando")
            print("\nüöÄ Voc√™ pode executar: python app.py")
        else:
            print("\n‚ö†Ô∏è PostgreSQL OK, mas Flask App com problemas")
    else:
        print("\n‚ùå Verifique a configura√ß√£o do PostgreSQL")
        print("üìã Dicas:")
        print("   1. Certifique-se que o PostgreSQL est√° rodando")
        print("   2. Verifique as credenciais no arquivo .env")
        print("   3. Confirme que o banco 'tma_tmr_db' existe no pgAdmin")
